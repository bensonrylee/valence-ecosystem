rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidFileSize() {
      return request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profile pictures
      allow write: if isOwner(userId) && isImageFile() && isValidFileSize();
    }
    
    // Service images
    match /services/{serviceId}/{fileName} {
      allow read: if true; // Public service images
      allow write: if isAuthenticated() && 
        isImageFile() && 
        isValidFileSize() &&
        // Verify the user owns the service
        firestore.exists(/databases/(default)/documents/services/$(serviceId)) &&
        firestore.get(/databases/(default)/documents/services/$(serviceId)).data.providerId == request.auth.uid;
    }
    
    // Review images
    match /reviews/{reviewId}/{fileName} {
      allow read: if true; // Public review images
      allow write: if isAuthenticated() && 
        isImageFile() && 
        isValidFileSize() &&
        // Verify the user owns the review
        firestore.exists(/databases/(default)/documents/reviews/$(reviewId)) &&
        firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.buyerId == request.auth.uid;
    }
    
    // Chat attachments (if implemented later)
    match /messages/{bookingId}/{fileName} {
      allow read: if isAuthenticated() &&
        // Verify user is participant in the booking
        firestore.exists(/databases/(default)/documents/bookings/$(bookingId)) &&
        (firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.buyerId == request.auth.uid ||
         firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.sellerId == request.auth.uid);
      allow write: if isAuthenticated() && 
        isValidFileSize() &&
        // Verify user is participant in the booking
        firestore.exists(/databases/(default)/documents/bookings/$(bookingId)) &&
        (firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.buyerId == request.auth.uid ||
         firestore.get(/databases/(default)/documents/bookings/$(bookingId)).data.sellerId == request.auth.uid);
    }
    
    // Temporary uploads (cleaned up after processing)
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidFileSize();
    }
  }
}